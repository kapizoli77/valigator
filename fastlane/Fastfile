default_platform(:ios)

require 'open-uri'
require 'zip'
require 'versionomy'
require_relative './Util.rb'

platform :ios do
  before_all do
    ENV['PROJECT_PATH'] = File.dirname(Dir.pwd)

    project_name = nil
    Dir.glob("#{File.dirname(Dir.pwd)}/*.podspec").select { |s| 
      project_name = File.basename(s, ".podspec")
    }
    ENV['PROJECT_NAME'] = project_name
  end

  # Build related stuffs

  desc "Description of what the lane does"
  lane :build do
    xcodebuild(workspace: "Valigator.xcworkspace",
        scheme: "iOS Example",
        arch: "x86_64",
        sdk: "iphonesimulator13.2",
        configuration: "Debug"
    )
  end

  desc "Check if SwiftLint is available or download the required version"
  lane :download_swiftlint do
    destination = "#{ENV['PROJECT_PATH']}/SwiftLint"
    version = "0.39.1"

    if File.exist?("#{destination}/swiftlint")
      local_version = File.read("#{destination}/.version")
      if version == local_version
        next
      else
        FileUtils.rm_rf(destination)
      end
    end

    FileUtils.mkdir_p(destination)
    url = "https://github.com/realm/SwiftLint/releases/download/#{version}/portable_swiftlint.zip"
    open(url) do |tempFile|
      p tempFile
      Zip::File.open(tempFile) do |zip_file|
        zip_file.each do |f|
          fpath = File.join(destination, f.name)
          zip_file.extract(f, fpath) unless File.exist?(fpath)
        end
      end
    end
    
    File.open("#{destination}/.version", 'w') {|f| f.write(version) }
  end

  # Release related stuffs

  desc "Release the library with the given version"
  lane :release do |params|
    patch_readme(params)
    patch_podspec(params)

    #Git administration
    version = check_version(params)
    sh "git tag #{version}"
    sh "git push origin --tags"
    # TODO: - Check actual branch and merge to master

    # Push podspect update
    sh "pod trunk push #{ENV['PROJECT_NAME']}.podspec"
  end

  desc "Patch the Readme file, change the mentioned version number with the given version"
  lane :patch_readme do |params|
    check_params(params)
    version = check_version(params)
    patch_all = params[:patch_all]
    patch_readme = params[:patch_readme]

    if patch_all == false || patch_readme == false
      UI.error "Skip patching Readme.md file!"
      next
    end

    if patch_all.nil? && patch_readme.nil?
      if !UI.confirm("Would you like to pattch the Readme.md file?")
        UI.error "Skip patching Readme.md file!"
        next
      end
    end

    UI.important "Patching the Readme.md file"

    replaceable_lines = []
    replaceable_lines.push(Util::ReplaceableLine.new("pod '#{ENV['PROJECT_NAME']}', '~>", "pod '#{ENV['PROJECT_NAME']}', '~> #{version}'"))
      replaceable_lines.push(Util::ReplaceableLine.new("    .package(url: \"https://github.com/kapizoli77/valigator\"", 
      "    .package(url: \"https://github.com/kapizoli77/valigator\", .upToNextMinor(from: \"#{version}\"))"))

    replace_lines("#{ENV['PROJECT_PATH']}/Readme.md", replaceable_lines)
  end

  desc "Patch the .podspec file, change the mentioned version number with the given version"
  lane :patch_podspec do |params|
    check_params(params)
    version = check_version(params)
    patch_all = params[:patch_all]
    patch_podspec = params[:patch_podspec]

    if patch_all == false || patch_podspec == false
      UI.error "Skip patching .podspec file!"
      next
    end

    if patch_all.nil? && patch_podspec.nil?
      if !UI.confirm("Would you like to pattch the .podspec file?")
        UI.error "Skip patching .podspec file!"
        next
      end
    end

    UI.important "Patching the .podspec file"

    replaceable_lines = []
    replaceable_lines.push(Util::ReplaceableLine.new("  spec.version", "  spec.version      = \"#{version}\""))

    replace_lines("#{ENV['PROJECT_PATH']}/#{ENV['PROJECT_NAME']}.podspec", replaceable_lines)
  end

  desc "Checks the given version, if used or not greater than the last one throws an error"
  private_lane :check_version do |params|
    version = params[:version]

    next version if ENV['IS_VERSION_CHECKED'] == 'true'

    tags = sh("git tag -l", log: false)
    tags = tags.split("\n")
    if tags.include?(version)
      UI.user_error! "The given version already used: #{version}"
    end

    last_tag = sh("git tag --sort=committerdate | tail -1", log: false)
    last_tag = last_tag.strip
    last_version = Versionomy.parse(last_tag)
    new_version = Versionomy.parse(version)
    
    if new_version <= last_version
      UI.user_error! "The given version: #{version} is smaller or equal to the last one: #{last_tag}"
    end
    
    ENV['IS_VERSION_CHECKED'] = 'true'

    version
  end

  desc "Checks the given parameters"
  private_lane :check_params do |params|
    version = params[:version]
    patch_all = params[:patch_all]
    patch_readme = params[:patch_readme]
    patch_podspec = params[:patch_podspec]

    if version.nil?
      UI.user_error! "Missing parameter: version"
    end

    if !patch_all.nil? && (!patch_readme.nil? || !patch_podspec.nil?)
      UI.user_error! "Invalid parameters: if patch_all is given, patch_readme and patch_podspec are not allowed!"
    end
  end

  def replace_lines(file_path, replaceable_lines)
    file = File.read(file_path)
    new_content = file.split("\n")
    new_content = new_content.map { |line|
      new_line = line
      replaceable_lines.each do |replaceable_line|
        if line.start_with?(replaceable_line.original_prefix)
          new_line = replaceable_line.modified_line
        end
      end
      new_line
    }.join("\n")
    File.open(file_path, 'w') { |line| line.puts new_content }
  end
end
